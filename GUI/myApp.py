# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'myApp.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import pandas as pd
import yfinance as yf
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QDesktopWidget, QHeaderView, QMessageBox
from matplotlib.backends.backend_qt5 import NavigationToolbar2QT as NavigationToolbar
import qdarkstyle

from parse import parsing_RBC, parsing_moex, parsing_invest_funds
from Portfolio import set_port_and_portfolio
from Sectors_and_countries import tsectors, set_t_port_sect, plot_s, tcapa, plot_c
from Recommendations import set_recom, final_plot
from Stock import plot_stock, get_stock_quarterly_earnings, get_stock, get_stock_quarterly_balance_sheet, \
    get_stock_quarterly_cashflow, get_stock_isin
from PortfolioTab import set_assets, plot_p, set_stock_growth, plot_common
from canvas import GraphicsCanvas
from pandasmodel import PandasModel


def main():  # ф-ция рассчета размера окна
    sizeObject = QDesktopWidget().screenGeometry(-1)  # -1 означает, что мы берем на измерение текущий экран
    heignt = sizeObject.height()
    width = sizeObject.width()
    return [int(heignt), int(width)]


def read_port():  # ф-ция читки портфеля
    l = []
    with open('proj.txt', 'r') as txt:
        while 1:
            s = txt.readline().replace('\n', '')
            if not s:
                break
            l.append(s)
    return l


def rewrite_port(el):  # ф-ция переписывания (добавления эл-та в портфель)
    with open('proj.txt', 'a') as txt:
        txt.write(el + '\n')


def remove_from_port(el):  # ф-ция удаления эл-та из портфеля
    with open("proj.txt", "r") as f:
        lines = f.readlines()
    with open("proj.txt", "w") as f:
        if el + '\n' in lines:
            lines.remove(el + '\n')
        for line in lines:
            f.write(line)


def clear_all():  # ф-ция очистки портфеля
    with open('proj.txt', 'w'):
        pass


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        self.uni_var = set_port_and_portfolio(read_port())
        self.start_port = read_port()
        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(main()[1], main()[0])

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, main()[1], main()[0]))
        self.tabWidget.setIconSize(QtCore.QSize(50, 20))
        self.tabWidget.setObjectName("tabWidget")

        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.label_for_pic = QtWidgets.QLabel(self.tab_2)
        self.label_for_pic.setGeometry(0, 0, main()[1], main()[0])
        self.label_for_pic.setPixmap(QtGui.QPixmap("Bez_imeni-3.png"))
        self.label_news = QtWidgets.QLabel(self.tab_2)
        self.label_news.setGeometry(QtCore.QRect(20, 20, 300, 30))
        self.label_news.setObjectName('label_news')
        self.label_news.setText('<h3 style="color: #000000;"> Select the financial news source <h3>')
        self.label_news.setStyleSheet('QLabel{background-color: transparent;}')
        self.comboBox_NEWS = QtWidgets.QComboBox(self.tab_2)
        self.comboBox_NEWS.setGeometry(QtCore.QRect(20, 50, 200, 41))
        self.comboBox_NEWS.setObjectName("comboBox_NEWS")
        self.comboBox_NEWS.addItem("")
        self.comboBox_NEWS.addItem("")
        self.comboBox_NEWS.addItem("")
        self.comboBox_NEWS.activated['QString'].connect(self.path_to_the_page)
        self.news_NEWS = QtWidgets.QTextBrowser(self.tab_2)
        self.show = True
        self.news_NEWS.setGeometry(QtCore.QRect(20, 110, 0, 0))
        self.news_NEWS.setObjectName("news_NEWS")
        self.news_NEWS.setOpenExternalLinks(True)  # опция для перенаправления при нажатии на ссылку
        self.tabWidget.addTab(self.tab_2, "")

        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.view = QtWidgets.QTableView(self.tab_3)
        self.view.setGeometry(QtCore.QRect(50, 50, 1200, 328))
        self.view.setObjectName("table_data_1")
        self.model = PandasModel(tsectors, headers_column=['Trough', 'Expansion', 'Peak', 'Recession'],
                                 headers_row=['1', '2', '3', '4', '5', '6', '',
                                              'Recommendations'])  # создаем модель готового класса
        self.view.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.view.setModel(self.model)  # добавляем модель в поле показа таблицы
        self.label_tsect = QtWidgets.QLabel(self.tab_3)
        self.label_tsect.setGeometry(QtCore.QRect(50, 379, 300, 30))
        self.label_tsect.setText('Table 2.1 Share Sectors due to Cycle')

        self.view_2 = QtWidgets.QTableView(self.tab_3)
        self.view_2.setGeometry(QtCore.QRect(50, 450, 700, 439))
        self.view_2.setObjectName("table_data_2")
        self.model_2 = PandasModel(tcapa, headers_column=['Country', 'Calculated Using', 'Index'],
                                   headers_row=[str(i) for i in range(1, tcapa.shape[0] + 1)])
        self.view_2.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.view_2.setModel(self.model_2)
        self.label_tcapa = QtWidgets.QLabel(self.tab_3)
        self.label_tcapa.setGeometry(QtCore.QRect(50, 890, 300, 30))
        self.label_tcapa.setText('Table 2.2 CAPA Index')

        self.view_3 = QtWidgets.QTableView(self.tab_3)
        self.view_3.setGeometry(QtCore.QRect(770, 450, 480, 254))
        self.view_3.setObjectName("table_data_3")
        self.t_port_sect = set_t_port_sect(self.uni_var)
        self.model_3 = PandasModel(self.t_port_sect, headers_column=['Stocks', 'Number', 'Countries', 'Sectors'],
                                   headers_row=[str(i) for i in range(1, self.t_port_sect.shape[0] + 1)])
        self.view_3.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.view_3.setModel(self.model_3)
        self.label_tpc = QtWidgets.QLabel(self.tab_3)
        self.label_tpc.setGeometry(QtCore.QRect(770, 705, 300, 30))
        self.label_tpc.setText('Table 2.3 Countries and Sectors of Stocks')

        self.widget_for_g_1 = QtWidgets.QWidget(self.tab_3)  # создаем виджет для добавления графика
        self.widget_for_g_1.setGeometry(1250, 0, 650, 385)
        self.label_g1 = QtWidgets.QLabel(self.tab_3)
        self.label_g1.setGeometry(QtCore.QRect(1250, 379, 300, 30))
        self.label_g1.setText('Plot 2.1 ')

        self.widget_for_g_2 = QtWidgets.QWidget(self.tab_3)
        self.widget_for_g_2.setGeometry(1250, 450, 650, 440)
        self.label_g2 = QtWidgets.QLabel(self.tab_3)
        self.label_g2.setGeometry(QtCore.QRect(1250, 882, 300, 30))
        self.label_g2.setText('Plot 2.2 ')

        self.fig_1 = plot_c(self.uni_var)  # график
        self.fig_2 = plot_s(self.uni_var)
        self.layout_for_mpl_1 = QtWidgets.QVBoxLayout(self.widget_for_g_1)  # виджет для компоновки объектов
        self.layout_for_mpl_2 = QtWidgets.QVBoxLayout(self.widget_for_g_2)
        self.canvas_1 = GraphicsCanvas(self.fig_1)  # создаем холст для прорисовки графика
        self.canvas_2 = GraphicsCanvas(self.fig_2)
        self.layout_for_mpl_1.addWidget(self.canvas_1)  # добавляем холст в лэйаут
        self.layout_for_mpl_2.addWidget(self.canvas_2)
        self.toolbar_1 = NavigationToolbar(self.canvas_1,
                                           MainWindow)  # создаем панель управления, берем ее с графика mpl
        self.toolbar_2 = NavigationToolbar(self.canvas_2, MainWindow)
        self.layout_for_mpl_1.addWidget(self.toolbar_1)  # добавляем панель управления в лэйаут
        self.layout_for_mpl_2.addWidget(self.toolbar_2)
        self.tabWidget.addTab(self.tab_3, "")

        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")
        self.edit = QtWidgets.QTextEdit(self.tab_4)
        self.edit.setGeometry(QtCore.QRect(20, 40, 200, 50))
        self.edit.setObjectName("editable_stock")
        self.label_stock = QtWidgets.QLabel(self.tab_4)
        self.label_stock.setGeometry(QtCore.QRect(20, 10, 300, 30))
        self.label_stock.setText('Enter the name of the stock')
        self.edit_n = QtWidgets.QTextEdit(self.tab_4)
        self.edit_n.setGeometry(QtCore.QRect(20, 120, 200, 50))
        self.edit_n.setObjectName("editable_number")
        self.label_num = QtWidgets.QLabel(self.tab_4)
        self.label_num.setGeometry(QtCore.QRect(20, 90, 300, 30))
        self.label_num.setText('Enter the number of the stock')
        self.add_btn = QtWidgets.QPushButton(self.tab_4)
        self.add_btn.setGeometry(QtCore.QRect(720, 20, 230, 50))
        self.add_btn.setObjectName("add_btn")
        self.add_btn.setText("Add stock into the portfolio")
        self.remove_btn = QtWidgets.QPushButton(self.tab_4)
        self.remove_btn.setGeometry(QtCore.QRect(1000, 20, 300, 50))
        self.remove_btn.setObjectName("remove_btn")
        self.remove_btn.setText("Remove the stock from the portfolio")
        self.clear_all_btn = QtWidgets.QPushButton(self.tab_4)
        self.clear_all_btn.setGeometry(QtCore.QRect(1500, 20, 200, 50))
        self.clear_all_btn.setObjectName("clear_btn")
        self.clear_all_btn.setText("Clear the portfolio")
        self.renew_plots = QtWidgets.QPushButton(self.tab_4)
        self.renew_plots.setGeometry(QtCore.QRect(1500, 80, 200, 50))
        self.renew_plots.setObjectName("renew_plots")
        self.renew_plots.setText("Renew plots")

        self.view_5 = QtWidgets.QTableView(self.tab_4)
        self.view_5.setGeometry(QtCore.QRect(30, 200, 1847, 254))
        self.view_5.setObjectName("table_data_5")
        self.label_assets = QtWidgets.QLabel(self.tab_4)
        self.label_assets.setGeometry(QtCore.QRect(30, 455, 300, 30))
        self.label_assets.setText('Table 3.1 Collective Information of Stocks')
        self.assets = set_assets(self.uni_var)
        self.model_5 = PandasModel(self.assets, headers_column=['Stocks', 'Number', 'Open', 'High', 'Low',
                                                                'Close', 'Volume', 'Dividends (per year)',
                                                                '% of Shares Held by All Insider',
                                                                '% of Shares Held by Institutions',
                                                                '% of Float Held by Institutions',
                                                                'Number of Institutions Holding Shares'],
                                   headers_row=[str(i) for i in range(1, self.assets.shape[0] + 1)])
        self.view_5.setModel(self.model_5)
        for i in range(int(self.assets.shape[1] / 2) + 1):  # изменения размера колонок
            self.view_5.setColumnWidth(i, 100)
        for i in range(int(self.assets.shape[1] / 2) + 2, self.assets.shape[1] + 1):
            self.view_5.setColumnWidth(i, 250)

        self.view_6 = QtWidgets.QTableView(self.tab_4)
        self.view_6.setGeometry(QtCore.QRect(30, 500, 500, 254))
        self.view_6.setObjectName("table_data_6")
        self.label_stock_growth = QtWidgets.QLabel(self.tab_4)
        self.label_stock_growth.setGeometry(QtCore.QRect(30, 755, 200, 30))
        self.label_stock_growth.setText('Table 3.2 Dynamic of Stocks')
        self.stock_growth = set_stock_growth(self.uni_var)
        self.model_6 = PandasModel(self.stock_growth, headers_column=['Stocks', 'Stock growth %',
                                                                      'Stock growth, RUB'],
                                   headers_row=[str(i) for i in range(1, self.stock_growth.shape[0] + 1)])
        self.view_6.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.view_6.setModel(self.model_6)

        self.widget_for_g_p = QtWidgets.QWidget(self.tab_4)
        self.widget_for_g_p.setGeometry(550, 470, 500, 460)
        self.label_g_p = QtWidgets.QLabel(self.tab_4)
        self.label_g_p.setGeometry(QtCore.QRect(552, 920, 200, 30))
        self.label_g_p.setText('Plot 3.1 ')

        self.widget_for_g_c = QtWidgets.QWidget(self.tab_4)
        self.widget_for_g_c.setGeometry(1100, 490, 700, 440)
        self.label_g_c = QtWidgets.QLabel(self.tab_4)
        self.label_g_c.setGeometry(QtCore.QRect(1102, 920, 200, 30))
        self.label_g_c.setText('Plot 3.2 ')

        self.comboBox_4 = QtWidgets.QComboBox(self.tab_4)
        self.comboBox_4.setGeometry(QtCore.QRect(1192, 495, 100, 31))
        self.comboBox_4.setObjectName("set_period")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.activated['QString'].connect(self.set_period)
        self.label_combob_4 = QtWidgets.QLabel(self.tab_4)
        self.label_combob_4.setGeometry(QtCore.QRect(1190, 462, 200, 30))
        self.label_combob_4.setText('Select period')

        self.fig_p = plot_p(self.uni_var)
        self.fig_c = plot_common(40, read_port())
        self.layout_for_mpl_p = QtWidgets.QVBoxLayout(self.widget_for_g_p)
        self.layout_for_mpl_c = QtWidgets.QVBoxLayout(self.widget_for_g_c)
        self.canvas_p = GraphicsCanvas(self.fig_p)
        self.canvas_c = GraphicsCanvas(self.fig_c)
        self.layout_for_mpl_p.addWidget(self.canvas_p)
        self.layout_for_mpl_c.addWidget(self.canvas_c)
        self.toolbar_p = NavigationToolbar(self.canvas_p, MainWindow)
        self.toolbar_c = NavigationToolbar(self.canvas_c, MainWindow)
        self.layout_for_mpl_p.addWidget(self.toolbar_p)
        self.layout_for_mpl_c.addWidget(self.toolbar_c)
        self.tabWidget.addTab(self.tab_4, "")

        self.tab_5 = QtWidgets.QWidget()
        self.tab_5.setObjectName("tab_5")
        self.comboBox_5 = QtWidgets.QComboBox(self.tab_5)
        self.comboBox_5.setGeometry(QtCore.QRect(30, 70, 200, 50))
        self.comboBox_5.setObjectName("set_strategy")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.activated['QString'].connect(self.set_strategy)
        self.label_combob_5 = QtWidgets.QLabel(self.tab_5)
        self.label_combob_5.setGeometry(QtCore.QRect(30, 38, 200, 30))
        self.label_combob_5.setText('Select strategy')

        self.view_7 = QtWidgets.QTableView(self.tab_5)
        self.view_7.setGeometry(QtCore.QRect(30, 150, 1300, 254))
        self.view_7.setObjectName("table_data_7")
        self.label_recom = QtWidgets.QLabel(self.tab_5)
        self.label_recom.setGeometry(QtCore.QRect(30, 405, 300, 30))
        self.label_recom.setText('Table 4.1 Recommendations on Strategies')
        self.columns_ = ['Stocks', 'SMA', 'twoSMA', 'EMA', 'DEMA', 'TEMA', 'MACD',
                         'CHV', 'RSI', 'bulls', 'bears', 'ER', 'MI', 'Agg']
        self.start_rec_num = 1
        self.recom = set_recom(self.start_rec_num, self.uni_var)
        self.model_7 = PandasModel(self.recom, headers_column=self.columns_,
                                   headers_row=[str(i) for i in range(1, self.recom.shape[0] + 1)])
        self.view_7.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.view_7.setModel(self.model_7)
        self.widget_for_final_plot = QtWidgets.QWidget(self.tab_5)
        self.widget_for_final_plot.setGeometry(30, 520, 700, 430)
        self.label_final = QtWidgets.QLabel(self.tab_5)
        self.label_final.setGeometry(QtCore.QRect(30, 950, 200, 30))
        self.label_final.setText('Plot 4.1 ')
        self.fig_final = final_plot(40, 'MSFT', 1, 1)
        self.layout_for_final_plot = QtWidgets.QVBoxLayout(self.widget_for_final_plot)
        self.canvas_final = GraphicsCanvas(self.fig_final)
        self.layout_for_final_plot.addWidget(self.canvas_final)
        self.toolbar_final = NavigationToolbar(self.canvas_final, MainWindow)
        self.layout_for_final_plot.addWidget(self.toolbar_final)

        self.comboBox_final_period = QtWidgets.QComboBox(self.tab_5)
        self.comboBox_final_period.setGeometry(QtCore.QRect(30, 490, 200, 30))
        self.comboBox_final_period.addItem("")
        self.comboBox_final_period.addItem("")
        self.comboBox_final_period.addItem("")
        self.label_fin_per = QtWidgets.QLabel(self.tab_5)
        self.label_fin_per.setGeometry(QtCore.QRect(30, 455, 200, 30))
        self.label_fin_per.setText('Select period')

        self.comboBox_final_stock = QtWidgets.QComboBox(self.tab_5)
        self.comboBox_final_stock.setGeometry(QtCore.QRect(280, 490, 200, 30))
        for i in list(set(self.start_port)):
            self.comboBox_final_stock.addItem("")
        self.label_fin_stck = QtWidgets.QLabel(self.tab_5)
        self.label_fin_stck.setGeometry(QtCore.QRect(280, 455, 300, 30))
        self.label_fin_stck.setText('Select stock (from portfolio)')

        self.comboBox_final_type = QtWidgets.QComboBox(self.tab_5)
        self.comboBox_final_type.setGeometry(QtCore.QRect(530, 490, 200, 30))
        self.comboBox_final_type.addItem("")
        self.comboBox_final_type.addItem("")
        self.comboBox_final_type.addItem("")
        self.label_fin_type = QtWidgets.QLabel(self.tab_5)
        self.label_fin_type.setGeometry(QtCore.QRect(530, 455, 300, 30))
        self.label_fin_type.setText('Select type of strategy')

        self.combobox_final_strategy = QtWidgets.QComboBox(self.tab_5)
        self.combobox_final_strategy.setGeometry(QtCore.QRect(780, 490, 200, 30))
        strategies = ['SMA', 'twoSMA', 'EMA', 'DEMA', 'TEMA', 'MACD', 'CHV', 'RSI', 'bulls', 'bears', 'ER', 'MI']
        for i in strategies:
            self.combobox_final_strategy.addItem("")
        self.label_fin_strat = QtWidgets.QLabel(self.tab_5)
        self.label_fin_strat.setGeometry(QtCore.QRect(780, 455, 200, 30))
        self.label_fin_strat.setText('Select strategy')

        self.final_btn = QtWidgets.QPushButton(self.tab_5)
        self.final_btn.setGeometry(QtCore.QRect(1030, 490, 200, 30))
        self.final_btn.setText('Renew final plot')
        self.tabWidget.addTab(self.tab_5, "")

        self.tab_6 = QtWidgets.QWidget()
        self.tab_6.setObjectName("tab_6")
        self.write_stock = QtWidgets.QTextEdit(self.tab_6)
        self.write_stock.setGeometry(QtCore.QRect(20, 40, 200, 50))
        self.write_stock.setObjectName("write_stock")
        self.label_cur_stock = QtWidgets.QLabel(self.tab_6)
        self.label_cur_stock.setGeometry(QtCore.QRect(20, 10, 200, 30))
        self.label_cur_stock.setText('Enter the name of the stock')
        self.comboBox_6 = QtWidgets.QComboBox(self.tab_6)
        self.comboBox_6.setGeometry(QtCore.QRect(20, 120, 200, 50))
        self.comboBox_6.setObjectName("set_period_for_stock")
        self.label_cur_period = QtWidgets.QLabel(self.tab_6)
        self.label_cur_period.setGeometry(QtCore.QRect(20, 90, 200, 30))
        self.label_cur_period.setText('Select period')
        self.comboBox_6.addItem("")
        self.comboBox_6.addItem("")
        self.comboBox_6.addItem("")
        self.comboBox_6.activated['QString'].connect(self.set_period_current_stock)
        self.isin = QtWidgets.QTextBrowser(self.tab_6)
        self.isin.setGeometry(QtCore.QRect(300, 120, 200, 50))
        self.chosen_stock = 'MSFT'
        self.isin.setText(get_stock_isin(get_stock(self.chosen_stock)))
        self.label_isin = QtWidgets.QLabel(self.tab_6)
        self.label_isin.setGeometry(QtCore.QRect(300, 90, 400, 30))
        self.label_isin.setText(f'International Securities Identification Number of {self.chosen_stock} stock')
        self.widget_for_stock_p = QtWidgets.QWidget(self.tab_6)
        self.widget_for_stock_p.setGeometry(20, 170, 700, 450)
        self.label_stock_p = QtWidgets.QLabel(self.tab_6)
        self.label_stock_p.setGeometry(QtCore.QRect(20, 610, 200, 30))
        self.label_stock_p.setText(f'Plot of {self.chosen_stock} stock')
        self.fig = plot_stock(self.chosen_stock, 150)
        self.layout_for_mpl_stock = QtWidgets.QVBoxLayout(self.widget_for_stock_p)
        self.canvas_stock = GraphicsCanvas(self.fig)
        self.layout_for_mpl_stock.addWidget(self.canvas_stock)
        self.toolbar_stock = NavigationToolbar(self.canvas_stock, MainWindow)
        self.layout_for_mpl_stock.addWidget(self.toolbar_stock)

        self.view_8 = QtWidgets.QTableView(self.tab_6)
        self.view_8.setGeometry(QtCore.QRect(20, 700, 700, 185))
        self.view_8.setObjectName("table_data_8")
        self.label_qt_earnings = QtWidgets.QLabel(self.tab_6)
        self.label_qt_earnings.setGeometry(QtCore.QRect(20, 885, 200, 30))
        self.label_qt_earnings.setText(f'Table 5.1 Quarterly Earnings of {self.chosen_stock} stock')
        self.stock_qt_earnings = get_stock_quarterly_earnings(get_stock(self.chosen_stock))
        self.rows_qearn = [str(i) for i in range(1, self.stock_qt_earnings.shape[0] + 1)]
        self.model_8 = PandasModel(self.stock_qt_earnings,
                                   headers_column=['Quarter', 'Revenue', 'Earnings'],
                                   headers_row=self.rows_qearn)
        self.view_8.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.view_8.setModel(self.model_8)

        self.view_9 = QtWidgets.QTableView(self.tab_6)
        self.view_9.setGeometry(QtCore.QRect(800, 100, 900, 777))
        self.view_9.setObjectName("table_data_9")
        self.label_qt_cashflow = QtWidgets.QLabel(self.tab_6)
        self.label_qt_cashflow.setGeometry(QtCore.QRect(800, 877, 400, 30))
        self.label_qt_cashflow.setText(f'Table 5.2 Quarterly Balance Sheet  of {self.chosen_stock} stock')
        self.stock_qt_cashflow = get_stock_quarterly_cashflow(get_stock(self.chosen_stock))
        self.rows_qcash = [str(i) for i in range(1, self.stock_qt_cashflow.shape[0] + 1)]
        self.model_9 = PandasModel(self.stock_qt_cashflow,
                                   headers_column=self.stock_qt_cashflow.columns.tolist(),
                                   headers_row=self.rows_qcash)
        self.view_9.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.view_9.setModel(self.model_9)
        self.tabWidget.addTab(self.tab_6, "")

        self.tab_7 = QtWidgets.QWidget()
        self.tab_7.setObjectName("tab_7")
        self.book = QtWidgets.QTextBrowser(self.tab_7)
        self.book.setGeometry(QtCore.QRect(20, 110, main()[1] - 650, main()[0] - 350))
        self.book.setObjectName("book")
        self.tutorial = open('tutorial.txt', encoding='utf-8').read()
        self.tutorial_eng = open('tutorial_eng.txt', encoding='utf-8').read()
        self.book.setText(self.tutorial_eng)
        self.change_lng = QtWidgets.QPushButton(self.tab_7)
        self.change_lng.setGeometry(QtCore.QRect(1000, 20, 300, 50))
        self.change_lng.setObjectName("change_lng_btn")
        self.change_lng.setText("Change the language")
        self.tabWidget.addTab(self.tab_7, "")

        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.add_btn.clicked.connect(self.add_to_the_portfolio)  # добавляем обработчик событий:
        # при нажатии на кнопку происходит действие переданной ф-ции
        self.remove_btn.clicked.connect(self.remove_the_stock)
        self.clear_all_btn.clicked.connect(self.clear_the_portfolio)
        self.renew_plots.clicked.connect(self.renew_all_plots)
        self.change_lng.clicked.connect(self.change_language)
        self.final_btn.clicked.connect(self.renew_final_plot)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.comboBox_NEWS.setItemText(0, _translate("MainWindow", "RBC"))
        self.comboBox_NEWS.setItemText(1, _translate("MainWindow", "Invest Funds: Today News"))
        self.comboBox_NEWS.setItemText(2, _translate("MainWindow", "MOEX"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "News"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("MainWindow", "Countries && Sectors"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_4), _translate("MainWindow", "Portfolio"))
        self.comboBox_4.setItemText(0, _translate("MainWindow", "20"))
        self.comboBox_4.setItemText(1, _translate("MainWindow", "150"))
        self.comboBox_4.setItemText(2, _translate("MainWindow", "360"))
        self.comboBox_5.setItemText(0, _translate("MainWindow", "Long-term strategy"))
        self.comboBox_5.setItemText(1, _translate("MainWindow", "Medium strategy"))
        self.comboBox_5.setItemText(2, _translate("MainWindow", "Quick strategy"))
        self.comboBox_6.setItemText(0, _translate("MainWindow", "20"))
        self.comboBox_6.setItemText(1, _translate("MainWindow", "150"))
        self.comboBox_6.setItemText(2, _translate("MainWindow", "360"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_5), _translate("MainWindow", "Strategies && "
                                                                                               "Recommendations"))
        self.comboBox_final_period.setItemText(0, _translate("MainWindow", "20"))
        self.comboBox_final_period.setItemText(1, _translate("MainWindow", "150"))
        self.comboBox_final_period.setItemText(2, _translate("MainWindow", "360"))
        for i, stock in zip(range(len(set(read_port()))), list(set(read_port()))):
            self.comboBox_final_stock.setItemText(i, _translate("MainWindow", stock))
        self.comboBox_final_type.setItemText(0, _translate("MainWindow", "Long-term strategy"))
        self.comboBox_final_type.setItemText(1, _translate("MainWindow", "Medium strategy"))
        self.comboBox_final_type.setItemText(2, _translate("MainWindow", "Quick strategy"))
        strategies = ['SMA', 'twoSMA', 'EMA', 'DEMA', 'TEMA', 'MACD', 'CHV', 'RSI', 'bulls', 'bears', 'ER', 'MI']
        for i, strategy in zip(range(12), strategies):
            self.combobox_final_strategy.setItemText(i, _translate("MainWindow", strategy))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_6), _translate("MainWindow", "Stock"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_7), _translate("MainWindow", "INFO"))

    def path_to_the_page(self, text):
        if self.show:
            self.news_NEWS.setGeometry(QtCore.QRect(20, 110, main()[1] - 500, main()[0] - 350))
            self.show = False
        if text == 'RBC':
            self.news_NEWS.setText(parsing_RBC())
            self.news_NEWS.setFixedHeight(int(self.news_NEWS.document().size().height() +
                                              self.news_NEWS.contentsMargins().top() * 2))
            self.news_NEWS.setFixedWidth(int(self.news_NEWS.document().idealWidth() +
                                             self.news_NEWS.contentsMargins().left() +
                                             self.news_NEWS.contentsMargins().right()))
        elif text == 'Invest Funds: Today News':
            self.news_NEWS.setText(parsing_invest_funds())
            self.news_NEWS.setFixedHeight(int(self.news_NEWS.document().size().height() +
                                              self.news_NEWS.contentsMargins().top() * 2))
            self.news_NEWS.setFixedWidth(int(self.news_NEWS.document().idealWidth() +
                                             self.news_NEWS.contentsMargins().left() +
                                             self.news_NEWS.contentsMargins().right()))
            if len(parsing_invest_funds()) == 0:
                self.news_NEWS.setText("News can't be founded today. Go to sleep and wait for it!")
                self.news_NEWS.setFixedHeight(int(self.news_NEWS.document().size().height() +
                                                  self.news_NEWS.contentsMargins().top() * 2))
                self.news_NEWS.setFixedWidth(int(self.news_NEWS.document().idealWidth() +
                                                 self.news_NEWS.contentsMargins().left() +
                                                 self.news_NEWS.contentsMargins().right()))
        elif text == 'MOEX':
            self.news_NEWS.setText(parsing_moex())
            self.news_NEWS.setFixedHeight(int(self.news_NEWS.document().size().height() +
                                              self.news_NEWS.contentsMargins().top() * 2))
            self.news_NEWS.setFixedWidth(int(self.news_NEWS.document().idealWidth() +
                                             self.news_NEWS.contentsMargins().left() +
                                             self.news_NEWS.contentsMargins().right()))

    def set_period(self, period):
        if period != '':
            self.layout_for_mpl_c.removeWidget(self.canvas_c)
            self.layout_for_mpl_c.removeWidget(self.toolbar_c)
            self.toolbar_c.deleteLater()
            self.canvas_c.deleteLater()
            self.canvas_c.hide()
            self.toolbar_c.hide()
            if period == '20':  # добавление новых данных в зависимости от текста внутри combobox
                self.fig_c = plot_common(20, read_port())
            elif period == '150':
                self.fig_c = plot_common(150, read_port())
            elif period == '360':
                self.fig_c = plot_common(360, read_port())
            self.canvas_c = GraphicsCanvas(self.fig_c)
            self.layout_for_mpl_c.addWidget(self.canvas_c)
            self.toolbar_c = NavigationToolbar(self.canvas_c, MainWindow)
            self.layout_for_mpl_c.addWidget(self.toolbar_c)

    def set_period_current_stock(self, period):
        stock = self.write_stock.toPlainText().upper()
        if stock != '':
            if len(yf.Ticker(stock).info) != 2:
                self.isin.setText(get_stock_isin(get_stock(stock)))
                self.label_isin.setText(f'International Securities Identification Number of {stock} stock')
                self.layout_for_mpl_stock.removeWidget(self.canvas_stock)
                self.layout_for_mpl_stock.removeWidget(self.toolbar_stock)
                self.toolbar_stock.deleteLater()
                self.canvas_stock.deleteLater()
                self.canvas_stock.hide()
                self.toolbar_stock.hide()
                if period == '20':
                    self.fig = plot_stock(stock, 20)
                elif period == '150':
                    self.fig = plot_stock(stock, 150)
                elif period == '360':
                    self.fig = plot_stock(stock, 360)
                self.canvas_stock = GraphicsCanvas(self.fig)
                self.layout_for_mpl_stock.addWidget(self.canvas_stock)
                self.toolbar_stock = NavigationToolbar(self.canvas_stock, MainWindow)
                self.layout_for_mpl_stock.addWidget(self.toolbar_stock)
                self.label_stock_p.setText(f'Dynamic plot of {stock} stock')

                self.stock_qt_earnings = get_stock_quarterly_earnings(get_stock(stock))
                self.rows_qearn = [str(i) for i in range(1, self.stock_qt_earnings.shape[0] + 1)]
                self.model_8 = PandasModel(self.stock_qt_earnings,
                                           headers_column=['Quarter', 'Revenue', 'Earnings'],
                                           headers_row=self.rows_qearn)
                self.view_8.setModel(self.model_8)
                self.label_qt_earnings.setText(f'Quarterly Earnings of {stock} stock')

                self.stock_qt_cashflow = get_stock_quarterly_cashflow(get_stock(stock))
                self.rows_qcash = [str(i) for i in
                                   range(1, self.stock_qt_cashflow.shape[0] + 1)]
                self.model_9 = PandasModel(self.stock_qt_cashflow,
                                           headers_column=self.stock_qt_cashflow.columns.tolist(),
                                           headers_row=self.rows_qcash)
                self.view_9.setModel(self.model_9)
                self.label_qt_cashflow.setText(f'Quarterly Balance Sheet of {stock} stock')
            else:
                error = QMessageBox()
                error.setWindowTitle("Ошибка набора")
                error.setText("Такой акции не существует")
                error.setIcon(QMessageBox.Warning)
                error.exec_()
        else:
            error = QMessageBox()
            error.setWindowTitle("Ошибка набора")
            error.setText("Пустой текст")
            error.setIcon(QMessageBox.Warning)
            error.exec_()

    def set_strategy(self, strategy):
        self.uni_var = set_port_and_portfolio(read_port())
        if strategy == 'Long-term strategy':
            self.start_rec_num = 1
            self.model = PandasModel(set_recom(self.start_rec_num, self.uni_var),
                                     headers_column=self.columns_,
                                     headers_row=[str(i) for i in range(1, self.recom.shape[0] + 1)])
        if strategy == 'Medium strategy':
            self.start_rec_num = 2
            self.model = PandasModel(set_recom(self.start_rec_num, self.uni_var),
                                     headers_column=self.columns_,
                                     headers_row=[str(i) for i in range(1, self.recom.shape[0] + 1)])
        if strategy == 'Quick strategy':
            self.start_rec_num = 3
            self.model = PandasModel(set_recom(self.start_rec_num, self.uni_var),
                                     headers_column=self.columns_,
                                     headers_row=[str(i) for i in range(1, self.recom.shape[0] + 1)])
        self.view_7.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.view_7.setModel(self.model)

    def renew_all_plots(self):
        changed_port = read_port()
        if (changed_port == self.start_port) | (changed_port == []):
            error = QMessageBox()
            error.setWindowTitle("Ошибка")
            error.setText("Ошибка обновления: нет данных или нет обновлений")
            error.setIcon(QMessageBox.Warning)
            error.exec_()
        else:
            cp = set_port_and_portfolio(changed_port)
            self.layout_for_mpl_1.removeWidget(self.canvas_1)
            self.layout_for_mpl_1.removeWidget(self.toolbar_1)
            self.layout_for_mpl_2.removeWidget(self.canvas_2)
            self.layout_for_mpl_2.removeWidget(self.toolbar_2)
            self.layout_for_mpl_p.removeWidget(self.canvas_p)
            self.layout_for_mpl_p.removeWidget(self.toolbar_p)
            self.layout_for_mpl_c.removeWidget(self.canvas_c)
            self.layout_for_mpl_c.removeWidget(self.toolbar_c)
            self.toolbar_1.deleteLater()
            self.toolbar_2.deleteLater()
            self.toolbar_p.deleteLater()
            self.toolbar_c.deleteLater()
            self.canvas_1.deleteLater()
            self.canvas_2.deleteLater()
            self.canvas_p.deleteLater()
            self.canvas_c.deleteLater()
            self.canvas_1.hide()
            self.canvas_2.hide()
            self.canvas_p.hide()
            self.canvas_c.hide()
            self.toolbar_1.hide()
            self.toolbar_2.hide()
            self.toolbar_p.hide()
            self.toolbar_c.hide()
            self.fig_1 = plot_c(cp)
            self.fig_2 = plot_s(cp)
            self.fig_p = plot_p(cp)
            self.fig_c = plot_common(40, read_port())
            self.canvas_1 = GraphicsCanvas(self.fig_1)
            self.canvas_2 = GraphicsCanvas(self.fig_2)
            self.canvas_p = GraphicsCanvas(self.fig_p)
            self.canvas_c = GraphicsCanvas(self.fig_c)
            self.layout_for_mpl_1.addWidget(self.canvas_1)
            self.layout_for_mpl_2.addWidget(self.canvas_2)
            self.layout_for_mpl_p.addWidget(self.canvas_p)
            self.layout_for_mpl_c.addWidget(self.canvas_c)
            self.toolbar_1 = NavigationToolbar(self.canvas_1, MainWindow)
            self.toolbar_2 = NavigationToolbar(self.canvas_2, MainWindow)
            self.toolbar_p = NavigationToolbar(self.canvas_p, MainWindow)
            self.toolbar_c = NavigationToolbar(self.canvas_c, MainWindow)
            self.layout_for_mpl_1.addWidget(self.toolbar_1)
            self.layout_for_mpl_2.addWidget(self.toolbar_2)
            self.layout_for_mpl_p.addWidget(self.toolbar_p)
            self.layout_for_mpl_c.addWidget(self.toolbar_c)

    def renew_final_plot(self):
        self.layout_for_final_plot.removeWidget(self.canvas_final)
        self.layout_for_final_plot.removeWidget(self.toolbar_final)
        self.canvas_final.deleteLater()
        self.canvas_final.hide()
        dict_types = {'Long-term strategy': 1, 'Medium strategy': 2, 'Quick strategy': 3}
        dict_strategies = {'SMA': 1, 'twoSMA': 2, 'EMA': 3, 'DEMA': 4, 'TEMA': 5, 'MACD': 6, 'CHV': 7, 'RSI': 8,
                           'bulls': 9, 'bears': 10, 'ER': 11, 'MI': 12}
        self.fig_final = final_plot(int(self.comboBox_final_period.currentText()), self.comboBox_final_stock.currentText(),
                                    dict_types[self.comboBox_final_type.currentText()],
                                    dict_strategies[self.combobox_final_strategy.currentText()])
        self.canvas_final = GraphicsCanvas(self.fig_final)
        self.layout_for_final_plot.addWidget(self.canvas_final)
        self.toolbar_final = NavigationToolbar(self.canvas_final, MainWindow)
        self.layout_for_final_plot.addWidget(self.toolbar_final)

    def renew_all_tables(self, old_p, stock):
        changed_port = read_port()
        if (stock == '') & (not changed_port):
            empty_data_1 = pd.DataFrame(columns=['Stocks', 'Number', 'Countries', 'Sectors'])
            empty_data_2 = pd.DataFrame(columns=['Stocks', 'Number', 'Open', 'High', 'Low',
                                                 'Close', 'Volume', 'Div. (per year)',
                                                 '% of Shares Held by All Insider',
                                                 '% of Shares Held by Inst.',
                                                 '% of Float Held by Inst.',
                                                 'Number of Inst. Hold. Shares'])
            empty_data_3 = pd.DataFrame(columns=['Stocks', 'Stock growth %', 'Stock growth, RUB'])
            empty_data_4 = pd.DataFrame(columns=self.columns_)
            self.model_3 = PandasModel(empty_data_1, headers_column=empty_data_1.columns,
                                       headers_row=[str(i) for i in range(1, empty_data_1.shape[0] + 1)])
            self.model_5 = PandasModel(empty_data_2, headers_column=empty_data_2.columns,
                                       headers_row=[str(i) for i in range(1, empty_data_2.shape[0] + 1)])
            self.model_6 = PandasModel(empty_data_3, headers_column=empty_data_3.columns,
                                       headers_row=[str(i) for i in range(1, empty_data_3.shape[0] + 1)])
            self.model_7 = PandasModel(empty_data_4, headers_column=empty_data_4.columns,
                                       headers_row=[str(i) for i in range(1, empty_data_4.shape[0] + 1)])
            self.view_3.setModel(self.model_3)
            self.view_5.setModel(self.model_5)
            self.view_6.setModel(self.model_6)
            self.view_7.setModel(self.model_7)
            self.comboBox_final_stock.clear()
        elif len(old_p) > len(changed_port):  # если в новом портфеле акций меньше, значит акция была удалена
            if stock in changed_port:  # если она все еще есть в портфеле, значит надо просто менять кол-во акций
                self.assets.loc[stock, 'Number'] = changed_port.count(stock)
                self.t_port_sect.loc[stock, 'Number'] = changed_port.count(stock)
            elif (stock not in changed_port) & (stock != ''):
                # если его нет в новом портфеле, значит надо удалить строку с этой акцией
                self.assets = self.assets.drop(stock)
                self.t_port_sect = self.t_port_sect.drop(stock)
                self.stock_growth = self.stock_growth.drop(stock)
                self.recom = self.recom.drop(stock)
                self.comboBox_final_stock.removeItem(list(set(old_p)).index(stock))
            self.model_3 = PandasModel(self.t_port_sect, headers_column=['Stocks', 'Number', 'Countries', 'Sectors'],
                                       headers_row=[str(i) for i in range(1, self.t_port_sect.shape[0] + 1)])
            self.view_3.setModel(self.model_3)
            self.model_5 = PandasModel(self.assets, headers_column=['Stocks', 'Number', 'Open', 'High', 'Low',
                                                                    'Close', 'Volume', 'Div. (per year)',
                                                                    '% of Shares Held by All Insider',
                                                                    '% of Shares Held by Inst.',
                                                                    '% of Float Held by Inst.',
                                                                    'Number of Inst. Hold. Shares'],
                                       headers_row=[str(i) for i in range(1, self.assets.shape[0] + 1)])
            self.view_5.setModel(self.model_5)
            self.model_6 = PandasModel(self.stock_growth, headers_column=['Stocks', 'Stock growth %',
                                                                          'Stock growth, RUB'],
                                       headers_row=[str(i) for i in
                                                    range(1, self.stock_growth.shape[0] + 1)])
            self.view_6.setModel(self.model_6)
            self.model_7 = PandasModel(self.recom, headers_column=self.columns_,
                                       headers_row=[str(i) for i in range(1, self.recom.shape[0] + 1)])
            self.view_7.setModel(self.model_7)
        elif len(old_p) < len(changed_port):  # если в новом портфеле акций больше, значит акция была добавлена
            if old_p.count(stock) >= 1:  # если акция уже была в портфеле, значит надо просто менять кол-во акций
                self.assets.loc[stock, 'Number'] = changed_port.count(stock)
                self.t_port_sect.loc[stock, 'Number'] = changed_port.count(stock)
            else:
                self.comboBox_final_stock.addItem("")
                _translate = QtCore.QCoreApplication.translate
                self.comboBox_final_stock.setItemText(len(set(changed_port)) - 1, _translate("MainWindow", stock))
                # если акций не было, добавляем строку с акцией, а также меняем кол-во, т.к. можно добавлять неск. акций
                stock_inf_1 = set_assets(set_port_and_portfolio([stock]))
                stock_inf_1.loc[stock, 'Number'] = changed_port.count(stock)
                stock_inf_2 = set_t_port_sect(set_port_and_portfolio([stock]))
                stock_inf_2.loc[stock, 'Number'] = changed_port.count(stock)
                stock_inf_3 = set_stock_growth(set_port_and_portfolio([stock]))
                stock_inf_4 = set_recom(self.start_rec_num, set_port_and_portfolio([stock]))
                if old_p:
                    self.assets = pd.concat([self.assets, stock_inf_1])
                    self.t_port_sect = pd.concat([self.t_port_sect, stock_inf_2])
                    self.stock_growth = pd.concat([self.stock_growth, stock_inf_3])
                    self.recom = pd.concat([self.recom, stock_inf_4])
                else:
                    self.assets = stock_inf_1
                    self.t_port_sect = stock_inf_2
                    self.stock_growth = stock_inf_3
                    self.recom = stock_inf_4
                    for i in range(int(self.assets.shape[1] / 2) + 1):
                        self.view_5.setColumnWidth(i, 100)
                    for i in range(int(self.assets.shape[1] / 2) + 2, self.assets.shape[1] + 1):
                        self.view_5.setColumnWidth(i, 250)
            self.model_3 = PandasModel(self.t_port_sect, headers_column=['Stocks', 'Number', 'Countries', 'Sectors'],
                                       headers_row=[str(i) for i in range(1, self.t_port_sect.shape[0] + 1)])
            self.view_3.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
            self.view_3.setModel(self.model_3)
            self.model_5 = PandasModel(self.assets, headers_column=['Stocks', 'Number', 'Open', 'High', 'Low',
                                                                    'Close', 'Volume', 'Div. (per year)',
                                                                    '% of Shares Held by All Insider',
                                                                    '% of Shares Held by Inst.',
                                                                    '% of Float Held by Inst.',
                                                                    'Number of Inst. Hold. Shares'],
                                       headers_row=[str(i) for i in range(1, self.assets.shape[0] + 1)])
            self.view_5.setModel(self.model_5)
            self.model_6 = PandasModel(self.stock_growth, headers_column=['Stocks', 'Stock growth %',
                                                                          'Stock growth, RUB'],
                                       headers_row=[str(i) for i in
                                                    range(1, self.stock_growth.shape[0] + 1)])
            self.view_6.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
            self.view_6.setModel(self.model_6)
            self.model_7 = PandasModel(self.recom, headers_column=self.columns_,
                                       headers_row=[str(i) for i in range(1, self.recom.shape[0] + 1)])
            self.view_7.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
            self.view_7.setModel(self.model_7)

    def change_language(self):
        if self.book.toPlainText() == self.tutorial:
            self.book.setText(self.tutorial_eng)
            self.book.setFixedHeight(int(self.book.document().size().height() + self.book.contentsMargins().top() * 2))
        else:
            self.book.setText(self.tutorial)
            self.book.setFixedHeight(int(self.book.document().size().height() + self.book.contentsMargins().top() * 2))

    def add_to_the_portfolio(self):
        old_port = read_port()
        if (self.edit.toPlainText() == '') | (self.edit_n.toPlainText() == ''):
            error = QMessageBox()
            error.setWindowTitle("Ошибка набора")
            error.setText("Пустой текст")
            error.setIcon(QMessageBox.Warning)
            error.exec_()
        else:
            try:
                n = int(self.edit_n.toPlainText())
                stock = self.edit.toPlainText().upper()
                if len(yf.Ticker(self.edit.toPlainText()).info) != 2:
                    while n > 0:
                        rewrite_port(stock)
                        n = n - 1
                    self.renew_all_tables(old_port, stock)
                else:
                    error = QMessageBox()
                    error.setWindowTitle("Ошибка набора")
                    error.setText("Такой акции не существует")
                    error.setIcon(QMessageBox.Warning)
                    error.exec_()
            except TypeError:
                error = QMessageBox()
                error.setWindowTitle("Ошибка набора")
                error.setText("Неверный формат текста")
                error.setIcon(QMessageBox.Warning)
                error.exec_()
        self.edit.clear()
        self.edit_n.clear()

    def remove_the_stock(self):
        old_port = read_port()
        if (self.edit.toPlainText() == '') | (self.edit_n.toPlainText() == ''):
            error = QMessageBox()
            error.setWindowTitle("Ошибка набора")
            error.setText("Пустой текст")
            error.setIcon(QMessageBox.Warning)
            error.exec_()
        else:
            try:
                n = int(self.edit_n.toPlainText())
                stock = self.edit.toPlainText().upper()
                if read_port().count(stock) >= n:
                    while n > 0:
                        remove_from_port(stock)
                        n = n - 1
                    self.renew_all_tables(old_port, stock)
                else:
                    error = QMessageBox()
                    error.setWindowTitle("Ошибка набора")
                    error.setText("У Вас осталось " + str(read_port().count(stock)) + " акций")
                    error.setIcon(QMessageBox.Warning)
                    error.exec_()
            except TypeError:
                error = QMessageBox()
                error.setWindowTitle("Ошибка набора")
                error.setText("Неверный формат текста")
                error.setIcon(QMessageBox.Warning)
                error.exec_()
            self.edit.clear()
            self.edit_n.clear()

    def clear_the_portfolio(self):
        old_port = read_port()
        if not old_port:
            error = QMessageBox()
            error.setWindowTitle("Ошибка")
            error.setText("Портфель уже пуст")
            error.setIcon(QMessageBox.Warning)
            error.exec_()
        else:
            clear_all()
            self.renew_all_tables(old_port, '')


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    app.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())  # изменение темы приложения
    MainWindow.show()
    sys.exit(app.exec_())
