# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'myApp.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import pandas as pd
import yfinance as yf

from PyQt5 import QtCore, QtGui
from PyQt5.QtCore import pyqtSignal, Qt
from PyQt5.QtWidgets import QDesktopWidget, QHeaderView, QMessageBox, QMainWindow
import qdarkstyle
from qt_material import apply_stylesheet
import matplotlib.pyplot as plt
from loading_window import loading_window
from all_necessary_objects import *

from parse import parsing_RBC, parsing_moex, parsing_invest_funds
from Portfolio import set_port_and_portfolio
from Sectors_and_countries import tsectors, set_t_port_sect, plot_s, tcapa, plot_c
from Recommendations import set_recom, final_plot
from Stock import plot_stock, get_stock_quarterly_earnings, get_stock, get_stock_quarterly_cashflow, get_stock_isin
from PortfolioTab import set_assets, plot_p, set_stock_growth, plot_common, pop_stocks

from canvas import GraphicsCanvas
from matplotlib.backends.backend_qt5 import NavigationToolbar2QT as NavigationToolbar
from pandasmodel import PandasModel
from strategies import html_strategies, html_strategies_eng


def main():  # ф-ция рассчета размера окна
    sizeObject = QDesktopWidget().screenGeometry(-1)  # -1 означает, что мы берем на измерение текущий экран
    heignt = sizeObject.height()
    width = sizeObject.width()
    return [int(heignt), int(width)]


def read_port():  # ф-ция читки портфеля
    l = []
    with open('proj.txt', 'r') as txt:
        while 1:
            s = txt.readline().replace('\n', '')
            if not s:
                break
            l.append(s)
    return l


def rewrite_port(el):  # ф-ция переписывания (добавления эл-та в портфель)
    with open('proj.txt', 'a') as txt:
        txt.write(el + '\n')


def remove_from_port(el):  # ф-ция удаления эл-та из портфеля
    with open("proj.txt", "r") as f:
        lines = f.readlines()
    with open("proj.txt", "w") as f:
        if el + '\n' in lines:
            lines.remove(el + '\n')
        for line in lines:
            f.write(line)


def clear_all():  # ф-ция очистки портфеля
    with open('proj.txt', 'w'):
        pass


def empty_pie(title):
    plt.style.use('dark_background')
    fig, ax1 = plt.subplots()
    ax1.set_title(title)
    plt.axis('off')
    fig.set_facecolor('#19232D')
    return fig


def empty_plot(title):
    plt.style.use('dark_background')
    fig, ax1 = plt.subplots()
    ax1.set_xlabel('Date, d/m')
    ax1.set_ylabel('Price, $')
    ax1.set_title(title)
    ax1.axes.xaxis.set_ticklabels([])
    ax1.axes.yaxis.set_ticklabels([])
    fig.set_facecolor('#19232D')
    return fig


class Ui_MainWindow(QMainWindow):
    loaded = pyqtSignal(int)

    def __init__(self, loader, parent=None):
        self.loader = loader
        QMainWindow.__init__(self, parent)

    def setupUi(self, MainWindow):
        self.loaded.emit(1)
        MainWindow.setFixedSize(main()[1], main()[0])
        MainWindow.setWindowIcon(QtGui.QIcon("necessary images and gifs/icon.jpg"))
        self.uni_var = set_port_and_portfolio(read_port())  # начальные необходимые данные
        self.start_port = read_port()
        self.loaded.emit(10)
        print('get some information about stocks in portfolio')

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, main()[1], main()[0]))
        self.tabWidget.setIconSize(QtCore.QSize(50, 20))
        self.tabWidget.tabBar().setStyleSheet("color: #00bbff;")

        self.tab = QtWidgets.QWidget()
        self.label_for_pic = QtWidgets.QLabel(self.tab)
        self.label_for_pic.setGeometry(0, 0, main()[1], main()[0])
        self.label_for_pic.setPixmap(QtGui.QPixmap("necessary images and gifs/a_news.png"))
        self.label_news = label(self.tab, QtCore.QRect(20, 20, 300, 30),
                                '<h3 style="color: #000000;"> Select the financial news source <h3>')
        self.label_news.setStyleSheet('QLabel{background-color: transparent;}')
        self.comboBox_NEWS = combobox(self.tab, QtCore.QRect(20, 50, 200, 41), 3)
        self.comboBox_NEWS.activated['QString'].connect(self.path_to_the_page)
        self.news_NEWS = text_browser(self.tab, QtCore.QRect(20, 110, 0, 0))
        self.news_NEWS.setOpenExternalLinks(True)  # опция для перенаправления при нажатии на ссылку
        self.pushButton_default = QtWidgets.QPushButton(self.tab)
        self.pushButton_default.setGeometry(1700, 20, 200, 50)
        self.pushButton_default.clicked.connect(lambda: MainWindow.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5()))
        self.pushButton_default.setText('Default Theme')
        self.pushButton = my_button_colorist(self.tab, QtCore.QRect(1700, 90, 200, 50), MainWindow, 'dark_amber.xml',
                                             'Amber Theme')  # FFBF00
        self.pushButton_2 = my_button_colorist(self.tab, QtCore.QRect(1700, 160, 200, 50), MainWindow, 'dark_cyan.xml',
                                               'Cyan Theme')  # 00FFFF
        self.pushButton_3 = my_button_colorist(self.tab, QtCore.QRect(1700, 230, 200, 50), MainWindow, 'dark_blue.xml',
                                               'Blue Theme')  # 0062CC
        self.pushButton_4 = my_button_colorist(self.tab, QtCore.QRect(1700, 300, 200, 50), MainWindow, 'dark_pink.xml',
                                               'Pink Theme')  # F85084
        self.pushButton_5 = my_button_colorist(self.tab, QtCore.QRect(1700, 370, 200, 50), MainWindow, 'dark_teal.xml',
                                               'Teal Theme')  # F85084
        self.tabWidget.addTab(self.tab, "")
        self.loaded.emit(20)
        print('tab1 has been formed')

        self.tab_2 = QtWidgets.QWidget()
        self.model = PandasModel(tsectors, headers_column=['Trough', 'Expansion', 'Peak', 'Recession'],
                                 headers_row=['1', '2', '3', '4', '5', '6', '',
                                              'Recommendations'])  # создаем модель готового класса
        self.view = table_view(self.tab_2, QtCore.QRect(50, 50, 1187, 328), self.model)
        self.view.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeToContents)
        self.label_tsect = label(self.tab_2, QtCore.QRect(50, 379, 400, 30), 'Table 2.1 Share Sectors due to Cycle')

        self.model_2 = PandasModel(tcapa, headers_column=['Country', 'Calculated Using', 'Index'],
                                   headers_row=[str(i) for i in range(1, tcapa.shape[0] + 1)])
        self.view_2 = table_view(self.tab_2, QtCore.QRect(50, 450, 700, 439), self.model_2)
        self.view_2.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.label_tcapa = label(self.tab_2, QtCore.QRect(50, 890, 300, 30), 'Table 2.2 CAPA Index')

        self.plot_pic = QtGui.QPixmap('necessary images and gifs/plot_business_cycle.jpg')
        self.label_for_plot_pic = QtWidgets.QLabel(self.tab_2)
        self.label_for_plot_pic.setGeometry(QtCore.QRect(770, 450, 480, 250))
        self.label_for_plot_pic.setPixmap(self.plot_pic)
        self.t_port_sect = set_t_port_sect(self.uni_var)
        self.model_3 = PandasModel(self.t_port_sect, headers_column=['Stocks', 'Number', 'Countries', 'Sectors'],
                                   headers_row=[str(i) for i in range(1, self.t_port_sect.shape[0] + 1)])
        self.view_3 = table_view(self.tab_2, QtCore.QRect(770, 722, 480, 160), self.model_3)
        header_3 = self.view_3.horizontalHeader()
        header_3.setSectionResizeMode(QtWidgets.QHeaderView.ResizeToContents)
        header_3.setSectionResizeMode(3, QtWidgets.QHeaderView.Stretch)
        self.label_tpc = label(self.tab_2, QtCore.QRect(770, 882, 400, 30), 'Table 2.3 Countries and Sectors of Stocks')

        self.widget_for_g_1 = QtWidgets.QWidget(self.tab_2)  # создаем виджет для добавления графика
        self.widget_for_g_1.setGeometry(1250, 0, 650, 385)
        self.label_g1 = label(self.tab_2, QtCore.QRect(1250, 379, 300, 30), 'Plot 2.1 Share by Countries')

        self.widget_for_g_2 = QtWidgets.QWidget(self.tab_2)
        self.widget_for_g_2.setGeometry(1250, 510, 650, 385)
        self.label_g2 = label(self.tab_2, QtCore.QRect(1250, 882, 300, 30), 'Plot 2.2 Share by Sectors')

        self.fig_1 = plot_c(self.uni_var)  # график
        self.fig_2 = plot_s(self.uni_var)
        self.layout_for_mpl_1 = QtWidgets.QVBoxLayout(self.widget_for_g_1)  # виджет для компоновки объектов
        self.layout_for_mpl_2 = QtWidgets.QVBoxLayout(self.widget_for_g_2)
        self.canvas_1 = GraphicsCanvas(self.fig_1)  # создаем холст для прорисовки графика
        self.canvas_2 = GraphicsCanvas(self.fig_2)
        self.layout_for_mpl_1.addWidget(self.canvas_1)  # добавляем холст в лэйаут
        self.layout_for_mpl_2.addWidget(self.canvas_2)
        self.toolbar_1 = NavigationToolbar(self.canvas_1,
                                           MainWindow)  # создаем панель управления, берем ее с графика mpl
        self.toolbar_2 = NavigationToolbar(self.canvas_2, MainWindow)
        self.layout_for_mpl_1.addWidget(self.toolbar_1)  # добавляем панель управления в лэйаут
        self.layout_for_mpl_2.addWidget(self.toolbar_2)
        self.tabWidget.addTab(self.tab_2, "")
        self.loaded.emit(35)
        print('tab2 has been formed')

        self.tab_3 = QtWidgets.QWidget()
        self.edit = line_edit(self.tab_3, QtCore.QRect(30, 20, 200, 40), "Ticker of a stock")
        self.edit_n = line_edit(self.tab_3, QtCore.QRect(30, 75, 200, 40), "Amount of stocks")
        self.add_btn = push_button(self.tab_3, QtCore.QRect(650, 20, 300, 50), "Add a stock into portfolio")
        self.remove_btn = push_button(self.tab_3, QtCore.QRect(1000, 20, 300, 50), "Remove a stock from portfolio")
        self.clear_all_btn = push_button(self.tab_3, QtCore.QRect(1677, 20, 200, 50), "Clear portfolio")

        self.assets = set_assets(self.uni_var)
        self.model_5 = PandasModel(self.assets, headers_column=['Stocks', 'Number', 'Open', 'High', 'Low',
                                                                'Close', 'Volume', 'Dividends (per year)',
                                                                '% of Shares Held by All Insider',
                                                                '% of Shares Held by Institutions',
                                                                '% of Float Held by Institutions',
                                                                'Number of Institutions Holding Shares'],
                                   headers_row=[str(i) for i in range(1, self.assets.shape[0] + 1)])
        self.view_5 = table_view(self.tab_3, QtCore.QRect(30, 160, 1750, 170), self.model_5)
        self.header_5 = self.view_5.horizontalHeader()
        self.header_5.setSectionResizeMode(QtWidgets.QHeaderView.ResizeToContents)
        self.label_assets = label(self.tab_3, QtCore.QRect(30, 333, 400, 30),
                                  'Table 3.1 Collective Information of Stocks')

        self.stock_growth = set_stock_growth(self.uni_var)
        self.model_6 = PandasModel(self.stock_growth, headers_column=['Stocks', 'Stock growth %',
                                                                      'Stock growth, RUB'],
                                   headers_row=[str(i) for i in range(1, self.stock_growth.shape[0] + 1)])
        self.view_6 = table_view(self.tab_3, QtCore.QRect(30, 420, 530, 170), self.model_6)
        self.view_6.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.label_stock_growth = label(self.tab_3, QtCore.QRect(30, 595, 300, 30), 'Table 3.2 Dynamic of Stocks')

        self.model_pop = PandasModel(pop_stocks, headers_column=['Ticker of stock', 'Company'],
                                     headers_row=[str(i) for i in range(1, pop_stocks.shape[0] + 1)])
        self.view_pop = table_view(self.tab_3, QtCore.QRect(30, 637, 530, 260), self.model_pop)
        self.view_pop.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.label_pop = label(self.tab_3, QtCore.QRect(30, 902, 300, 30), 'Table 3.3 Companies and Tickers')

        self.widget_for_g_p = QtWidgets.QWidget(self.tab_3)
        self.widget_for_g_p.setGeometry(580, 415, 570, 500)
        self.label_g_p = label(self.tab_3, QtCore.QRect(582, 903, 200, 30), 'Plot 3.1 Amount of Stocks')

        self.widget_for_g_c = QtWidgets.QWidget(self.tab_3)
        self.widget_for_g_c.setGeometry(1200, 415, 665, 500)
        self.label_g_c = label(self.tab_3, QtCore.QRect(1202, 903, 480, 30),
                               '<a>Plot 3.2 Price of Stocks in Fixed Period (By default: <strong>150 days</strong>)</a>')

        self.comboBox_4 = combobox(self.tab_3, QtCore.QRect(1650, 415, 120, 30), 3)
        self.comboBox_4.activated['QString'].connect(self.set_period)
        self.label_combob_4 = label(self.tab_3, QtCore.QRect(1650, 385, 200, 30), 'Select period')

        self.fig_p = plot_p(self.uni_var)
        self.fig_c = plot_common(150, read_port())
        self.layout_for_mpl_p = QtWidgets.QVBoxLayout(self.widget_for_g_p)
        self.layout_for_mpl_c = QtWidgets.QVBoxLayout(self.widget_for_g_c)
        self.canvas_p = GraphicsCanvas(self.fig_p)
        self.canvas_c = GraphicsCanvas(self.fig_c)
        self.layout_for_mpl_p.addWidget(self.canvas_p)
        self.layout_for_mpl_c.addWidget(self.canvas_c)
        self.toolbar_p = NavigationToolbar(self.canvas_p, MainWindow)
        self.toolbar_c = NavigationToolbar(self.canvas_c, MainWindow)
        self.layout_for_mpl_p.addWidget(self.toolbar_p)
        self.layout_for_mpl_c.addWidget(self.toolbar_c)
        self.tabWidget.addTab(self.tab_3, "")
        self.loaded.emit(60)
        print('tab3 has been formed')

        self.tab_4 = QtWidgets.QWidget()
        self.comboBox_5 = combobox(self.tab_4, QtCore.QRect(30, 58, 200, 40), 3)
        self.comboBox_5.activated['QString'].connect(self.set_strategy)
        self.label_combob_5 = label(self.tab_4, QtCore.QRect(30, 28, 200, 30), 'Select strategy')

        self.columns_ = ['Stocks', 'SMA', 'twoSMA', 'EMA', 'DEMA', 'TEMA', 'MACD',
                         'CHV', 'RSI', 'bulls', 'bears', 'ER', 'MI', 'Agg']
        self.start_rec_num = 1
        self.recom = set_recom(self.start_rec_num, self.uni_var)
        self.model_7 = PandasModel(self.recom, headers_column=self.columns_,
                                   headers_row=[str(i) for i in range(1, self.recom.shape[0] + 1)])
        self.view_7 = table_view(self.tab_4, QtCore.QRect(30, 150, 1130, 170), self.model_7)
        self.view_7.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.label_recom = label(self.tab_4, QtCore.QRect(30, 323, 400, 30), 'Table 4.1 Recommendations on Strategies')

        self.widget_for_final_plot = QtWidgets.QWidget(self.tab_4)
        self.widget_for_final_plot.setGeometry(30, 347, 720, 580)
        value = read_port()[0]
        self.fig_final = final_plot(150, value, 11, 1)
        self.layout_for_final_plot = QtWidgets.QVBoxLayout(self.widget_for_final_plot)
        self.canvas_final = GraphicsCanvas(self.fig_final)
        self.layout_for_final_plot.addWidget(self.canvas_final)
        self.toolbar_final = NavigationToolbar(self.canvas_final, MainWindow)
        self.layout_for_final_plot.addWidget(self.toolbar_final)
        self.label_final = label(self.tab_4, QtCore.QRect(30, 914, 400, 30), f'Plot 4.1 Strategy for {value}')

        self.comboBox_final_period = combobox(self.tab_4, QtCore.QRect(810, 436, 200, 40), 3)
        self.label_fin_per = label(self.tab_4, QtCore.QRect(810, 405, 200, 30), 'Select period')

        self.comboBox_final_stock = combobox(self.tab_4, QtCore.QRect(810, 521, 200, 40), len(set(self.start_port)))
        self.label_fin_stck = label(self.tab_4, QtCore.QRect(810, 490, 300, 30), 'Select stock (from portfolio)')

        self.comboBox_final_type = combobox(self.tab_4, QtCore.QRect(810, 607, 200, 40), 3)
        self.label_fin_type = label(self.tab_4, QtCore.QRect(810, 575, 300, 30), 'Select type of strategy')

        strategies = ['SMA', 'twoSMA', 'EMA', 'DEMA', 'TEMA', 'MACD', 'CHV', 'RSI', 'bulls', 'bears', 'ER', 'MI']
        self.combobox_final_strategy = combobox(self.tab_4, QtCore.QRect(810, 697, 200, 40), len(strategies))
        self.label_fin_strat = label(self.tab_4, QtCore.QRect(810, 665, 200, 30), 'Select strategy')

        self.final_btn = push_button(self.tab_4, QtCore.QRect(810, 800, 200, 50), "Renew final plot")
        self.tabWidget.addTab(self.tab_4, "")

        self.about_strategies = text_browser(self.tab_4, QtCore.QRect(1210, 150, 670, 790))
        self.strategies = html_strategies
        self.strategies_eng = html_strategies_eng
        self.about_strategies.setHtml(self.strategies_eng)
        self.change_lng_strat = push_button(self.tab_4, QtCore.QRect(1680, 80, 200, 50), "Change language")
        self.flag_language = 'eng'

        self.loaded.emit(70)
        print('tab4 has been formed')

        self.tab_5 = QtWidgets.QWidget()
        self.write_stock = line_edit(self.tab_5, QtCore.QRect(20, 20, 200, 40), "Ticker of a stock")
        self.comboBox_6 = combobox(self.tab_5, QtCore.QRect(20, 101, 200, 40), 3)
        self.comboBox_6.activated['QString'].connect(self.set_period_current_stock)
        self.label_cur_period = label(self.tab_5, QtCore.QRect(20, 70, 200, 30), "Select period")
        self.isin = text_browser(self.tab_5, QtCore.QRect(300, 55, 200, 40))
        self.isin.setText(get_stock_isin(get_stock(value)))
        self.isin.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
        self.label_isin = label(self.tab_5, QtCore.QRect(300, 20, 500, 30),
                                f'International Securities Identification Number of {value} stock')
        self.widget_for_stock_p = QtWidgets.QWidget(self.tab_5)
        self.widget_for_stock_p.setGeometry(20, 150, 700, 470)
        self.label_stock_p = label(self.tab_5, QtCore.QRect(20, 610, 300, 30), f'Plot of {value} stock')
        self.fig = plot_stock(value, 150)
        self.layout_for_mpl_stock = QtWidgets.QVBoxLayout(self.widget_for_stock_p)
        self.canvas_stock = GraphicsCanvas(self.fig)
        self.layout_for_mpl_stock.addWidget(self.canvas_stock)
        self.toolbar_stock = NavigationToolbar(self.canvas_stock, MainWindow)
        self.layout_for_mpl_stock.addWidget(self.toolbar_stock)

        self.stock_qt_earnings = get_stock_quarterly_earnings(get_stock(value))
        self.rows_qearn = [str(i) for i in range(1, self.stock_qt_earnings.shape[0] + 1)]
        self.model_8 = PandasModel(self.stock_qt_earnings,
                                   headers_column=['Quarter', 'Revenue', 'Earnings'],
                                   headers_row=self.rows_qearn)
        self.view_8 = table_view(self.tab_5, QtCore.QRect(20, 700, 700, 185), self.model_8)
        self.view_8.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.label_qt_earnings = label(self.tab_5, QtCore.QRect(20, 885, 400, 30),
                                       f'Table 5.1 Quarterly Earnings of {value} stock')

        self.stock_qt_cashflow = get_stock_quarterly_cashflow(get_stock(value))
        self.rows_qcash = [str(i) for i in range(1, self.stock_qt_cashflow.shape[0] + 1)]
        self.model_9 = PandasModel(self.stock_qt_cashflow,
                                   headers_column=list(map(lambda x: str(x).replace(' 00:00:00', ''),
                                                           self.stock_qt_cashflow.columns)),
                                   headers_row=self.rows_qcash)
        self.view_9 = table_view(self.tab_5, QtCore.QRect(800, 20, 1000, 777), self.model_9)
        header_9 = self.view_9.horizontalHeader()
        header_9.setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        header_9.setSectionResizeMode(0, QtWidgets.QHeaderView.ResizeToContents)
        self.label_qt_cashflow = label(self.tab_5, QtCore.QRect(800, 798, 400, 30),
                                       f'Table 5.2 Quarterly Balance Sheet  of {value} stock')
        self.tabWidget.addTab(self.tab_5, "")
        self.loaded.emit(85)
        print('tab5 has been formed')

        self.tab_6 = QtWidgets.QWidget()
        self.moviee = QtGui.QMovie('necessary images and gifs/trading.gif')
        self.label_for_movie = QtWidgets.QLabel(self.tab_6)
        self.label_for_movie.setMovie(self.moviee)
        self.moviee.start()
        self.book = text_browser(self.tab_6, QtCore.QRect(20, 110, main()[1] - 650, main()[0] - 640))
        self.tutorial = open('necessary static txt files/tutorial.txt', encoding='utf-8').read()
        self.tutorial_eng = open('necessary static txt files/tutorial_eng.txt', encoding='utf-8').read()
        self.book.setText(self.tutorial_eng)
        self.contributors = text_browser(self.tab_6, QtCore.QRect(20, 920, main()[1] - 650, 35))
        self.contributors.setText("Developers: <a href=https://github.com/dzbarts>Artem Dzuybak</a> "
                                  "and <a href=https://github.com/ValeriaMatveeva1>Matveeva Valeria</a>")
        self.contributors.setOpenExternalLinks(True)
        self.change_lng = push_button(self.tab_6, QtCore.QRect(1095, 45, 200, 50), "Change language")
        self.tabWidget.addTab(self.tab_6, "")
        self.loaded.emit(95)
        print('the last lab6 has been formed')
        print('wait for the app!')

        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.font = QtGui.QFont('Futura', 10)
        MainWindow.setFont(self.font)

        self.add_btn.clicked.connect(self.add_to_the_portfolio)  # добавляем обработчик событий:
        # при нажатии на кнопку происходит действие переданной ф-ции
        self.remove_btn.clicked.connect(self.remove_the_stock)
        self.clear_all_btn.clicked.connect(self.clear_the_portfolio)
        self.final_btn.clicked.connect(self.renew_final_plot)
        self.change_lng_strat.clicked.connect(self.change_language_strategies)
        self.change_lng.clicked.connect(self.change_language)

        self.loaded.emit(100)
        self.loader.close()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Trading Helper"))
        self.comboBox_NEWS.setItemText(0, _translate("MainWindow", "RBC"))
        self.comboBox_NEWS.setItemText(1, _translate("MainWindow", "Invest Funds: Today News"))
        self.comboBox_NEWS.setItemText(2, _translate("MainWindow", "MOEX"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "News"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Countries && Sectors"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("MainWindow", "Portfolio"))
        self.comboBox_4.setItemText(0, _translate("MainWindow", "20"))
        self.comboBox_4.setItemText(1, _translate("MainWindow", "150"))
        self.comboBox_4.setItemText(2, _translate("MainWindow", "360"))
        self.comboBox_5.setItemText(0, _translate("MainWindow", "Long-term strategy"))
        self.comboBox_5.setItemText(1, _translate("MainWindow", "Medium-term strategy"))
        self.comboBox_5.setItemText(2, _translate("MainWindow", "Short-term strategy"))
        self.comboBox_6.setItemText(0, _translate("MainWindow", "20"))
        self.comboBox_6.setItemText(1, _translate("MainWindow", "150"))
        self.comboBox_6.setItemText(2, _translate("MainWindow", "360"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_4), _translate("MainWindow", "Strategies && "
                                                                                               "Recommendations"))
        self.comboBox_final_period.setItemText(0, _translate("MainWindow", "20"))
        self.comboBox_final_period.setItemText(1, _translate("MainWindow", "150"))
        self.comboBox_final_period.setItemText(2, _translate("MainWindow", "360"))
        for i, stock in zip(range(len(set(read_port()))), list(set(read_port()))):
            self.comboBox_final_stock.setItemText(i, _translate("MainWindow", stock))
        self.comboBox_final_type.setItemText(0, _translate("MainWindow", "Long-term strategy"))
        self.comboBox_final_type.setItemText(1, _translate("MainWindow", "Medium-term strategy"))
        self.comboBox_final_type.setItemText(2, _translate("MainWindow", "Short-term strategy"))
        strategies = ['SMA', 'twoSMA', 'EMA', 'DEMA', 'TEMA', 'MACD', 'CHV', 'RSI', 'bulls', 'bears', 'ER', 'MI']
        for i, strategy in zip(range(12), strategies):
            self.combobox_final_strategy.setItemText(i, _translate("MainWindow", strategy))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_5), _translate("MainWindow", "Stock"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_6), _translate("MainWindow", "INFO"))

    def path_to_the_page(self, text):
        self.news_NEWS.setGeometry(QtCore.QRect(619, 287, main()[1] - 1160, main()[0] - 503))
        if text == 'RBC':
            self.news_NEWS.setText(parsing_RBC())
        elif text == 'Invest Funds: Today News':
            self.news_NEWS.setText(parsing_invest_funds())
            if len(parsing_invest_funds()) == 0:
                self.news_NEWS.setText("News can't be founded today. Wait for it!")
                self.news_NEWS.setAlignment(Qt.AlignCenter)
        elif text == 'MOEX':
            self.news_NEWS.setText(parsing_moex())

    def set_period(self, period):
        if not read_port():
            message_box("Ошибка обновления", "Нечего обновлять. Добавьте акцию(и) и повторите попытку!",
                        QMessageBox.Warning)
        else:
            if period != '':
                for i in [self.toolbar_c, self.canvas_c]:
                    self.layout_for_mpl_c.removeWidget(i)
                    i.deleteLater()
                    i.hide()
                self.fig_c = plot_common(int(period), read_port())
                self.canvas_c = GraphicsCanvas(self.fig_c)
                self.layout_for_mpl_c.addWidget(self.canvas_c)
                self.toolbar_c = NavigationToolbar(self.canvas_c, MainWindow)
                self.layout_for_mpl_c.addWidget(self.toolbar_c)

    def set_period_current_stock(self, period):
        stock = self.write_stock.text().upper()
        if stock != '':
            if len(yf.Ticker(stock).info) != 2:
                self.isin.setText(get_stock_isin(get_stock(stock)))
                self.isin.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
                self.label_isin.setText(f'International Securities Identification Number of {stock} stock')
                for i in [self.canvas_stock, self.toolbar_stock]:
                    self.layout_for_mpl_stock.removeWidget(i)
                    i.deleteLater()
                    i.hide()
                self.fig = plot_stock(stock, int(period))
                self.canvas_stock = GraphicsCanvas(self.fig)
                self.layout_for_mpl_stock.addWidget(self.canvas_stock)
                self.toolbar_stock = NavigationToolbar(self.canvas_stock, MainWindow)
                self.layout_for_mpl_stock.addWidget(self.toolbar_stock)
                self.label_stock_p.setText(f'Dynamic plot of {stock} stock')

                self.stock_qt_earnings = get_stock_quarterly_earnings(get_stock(stock))
                self.rows_qearn = [str(i) for i in range(1, self.stock_qt_earnings.shape[0] + 1)]
                self.model_8 = PandasModel(self.stock_qt_earnings,
                                           headers_column=['Quarter', 'Revenue', 'Earnings'],
                                           headers_row=self.rows_qearn)
                self.view_8.setModel(self.model_8)
                self.label_qt_earnings.setText(f'Quarterly Earnings of {stock} stock')

                self.stock_qt_cashflow = get_stock_quarterly_cashflow(get_stock(stock))
                self.rows_qcash = [str(i) for i in
                                   range(1, self.stock_qt_cashflow.shape[0] + 1)]
                self.model_9 = PandasModel(self.stock_qt_cashflow,
                                           headers_column=list(map(lambda x: str(x).replace(' 00:00:00', ''),
                                                                   self.stock_qt_cashflow.columns)),
                                           headers_row=self.rows_qcash)
                self.view_9.setModel(self.model_9)
                self.label_qt_cashflow.setText(f'Quarterly Balance Sheet of {stock} stock')
            else:
                message_box("Ошибка набора", "Такой акции не существует", QMessageBox.Warning)
        else:
            message_box("Ошибка набора", "Пустой текст", QMessageBox.Warning)
        self.write_stock.clear()

    def set_strategy(self, strategy):
        if not read_port():
            message_box("Ошибка обновления", "Нечего обновлять. Добавьте акцию(и) и повторите попытку!",
                        QMessageBox.Warning)
        else:
            self.uni_var = set_port_and_portfolio(read_port())
            dict_types = {'Long-term strategy': 1, 'Medium-term strategy': 2, 'Short-term strategy': 3}
            self.model = PandasModel(set_recom(dict_types[strategy], self.uni_var),
                                     headers_column=self.columns_,
                                     headers_row=[str(i) for i in range(1, self.recom.shape[0] + 1)])
            self.view_7.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
            self.view_7.setModel(self.model)

    def renew_final_plot(self):
        if self.comboBox_final_stock.currentText() == '':
            message_box("Ошибка обновления", "Нечего обновлять. Добавьте акцию(и) и повторите попытку!", QMessageBox.Warning)
        else:
            value = self.comboBox_final_stock.currentText()
            self.label_final.setText(f'Plot 4.1 Strategy for {value}')
            for i in [self.canvas_final, self.toolbar_final]:
                self.layout_for_final_plot.removeWidget(i)
                i.deleteLater()
                i.hide()
            dict_types = {'Long-term strategy': 1, 'Medium-term strategy': 2, 'Short-term strategy': 3}
            dict_strategies = {'SMA': 1, 'twoSMA': 2, 'EMA': 3, 'DEMA': 4, 'TEMA': 5, 'MACD': 6, 'CHV': 7, 'RSI': 8,
                               'bulls': 9, 'bears': 10, 'ER': 11, 'MI': 12}
            self.fig_final = final_plot(int(self.comboBox_final_period.currentText()),
                                        self.comboBox_final_stock.currentText(),
                                        dict_types[self.comboBox_final_type.currentText()],
                                        dict_strategies[self.combobox_final_strategy.currentText()])
            self.canvas_final = GraphicsCanvas(self.fig_final)
            self.layout_for_final_plot.addWidget(self.canvas_final)
            self.toolbar_final = NavigationToolbar(self.canvas_final, MainWindow)
            self.layout_for_final_plot.addWidget(self.toolbar_final)

    def renew_all_tables(self, old_p, stock):
        changed_port = read_port()
        if not changed_port:
            self.t_port_sect = pd.DataFrame(columns=['Stocks', 'Number', 'Countries', 'Sectors'])
            self.assets = pd.DataFrame(columns=['Stocks', 'Number', 'Open', 'High', 'Low',
                                                'Close', 'Volume', 'Dividends (per year)',
                                                '% of Shares Held by All Insider',
                                                '% of Shares Held by Inst.',
                                                '% of Float Held by Inst.',
                                                'Number of Inst. Hold. Shares'])
            self.stock_growth = pd.DataFrame(columns=['Stocks', 'Stock growth %', 'Stock growth, RUB'])
            self.recom = pd.DataFrame(columns=self.columns_)
            self.label_final.setText('Plot 4.1')
            self.layout_for_final_plot.removeWidget(self.canvas_final)
            self.layout_for_final_plot.removeWidget(self.toolbar_final)
            self.canvas_final.deleteLater()
            self.canvas_final.hide()
            self.fig_final = empty_plot("Strategy for stock")
            self.canvas_final = GraphicsCanvas(self.fig_final)
            self.layout_for_final_plot.addWidget(self.canvas_final)
            self.toolbar_final = NavigationToolbar(self.canvas_final, MainWindow)
            self.layout_for_final_plot.addWidget(self.toolbar_final)
            self.comboBox_final_stock.clear()
        elif len(old_p) > len(changed_port):  # если в новом портфеле акций меньше, значит акция была удалена
            if stock in changed_port:  # если она все еще есть в портфеле, значит надо просто менять кол-во акций
                self.assets.loc[stock, 'Number'] = changed_port.count(stock)
                self.t_port_sect.loc[stock, 'Number'] = changed_port.count(stock)
            elif (stock not in changed_port) & (stock != ''):
                # если его нет в новом портфеле, значит надо удалить строку с этой акцией
                self.assets = self.assets.drop(stock)
                self.t_port_sect = self.t_port_sect.drop(stock)
                self.stock_growth = self.stock_growth.drop(stock)
                self.recom = self.recom.drop(stock)
                self.comboBox_final_stock.removeItem(list(set(old_p)).index(stock))
        elif len(old_p) < len(changed_port):  # если в новом портфеле акций больше, значит акция была добавлена
            if old_p.count(stock) >= 1:  # если акция уже была в портфеле, значит надо просто менять кол-во акций
                self.assets.loc[stock, 'Number'] = changed_port.count(stock)
                self.t_port_sect.loc[stock, 'Number'] = changed_port.count(stock)
            else:
                self.comboBox_final_stock.addItem("")
                _translate = QtCore.QCoreApplication.translate
                self.comboBox_final_stock.setItemText(len(set(changed_port)) - 1, _translate("MainWindow", stock))
                # если акций не было, добавляем строку с акцией, а также меняем кол-во, т.к. можно добавлять неск. акций
                get_inf_stock = set_port_and_portfolio([stock])
                stock_inf_1 = set_assets(get_inf_stock)
                stock_inf_1.loc[stock, 'Number'] = changed_port.count(stock)
                stock_inf_2 = set_t_port_sect(get_inf_stock)
                stock_inf_2.loc[stock, 'Number'] = changed_port.count(stock)
                stock_inf_3 = set_stock_growth(get_inf_stock)
                stock_inf_4 = set_recom(self.start_rec_num, get_inf_stock)
                if old_p:
                    self.assets = pd.concat([self.assets, stock_inf_1])
                    self.t_port_sect = pd.concat([self.t_port_sect, stock_inf_2])
                    self.stock_growth = pd.concat([self.stock_growth, stock_inf_3])
                    self.recom = pd.concat([self.recom, stock_inf_4])
                else:
                    self.assets = stock_inf_1
                    self.t_port_sect = stock_inf_2
                    self.stock_growth = stock_inf_3
                    self.recom = stock_inf_4
                    for i in range(int(self.assets.shape[1] / 2) + 1):
                        self.view_5.setColumnWidth(i, 100)
                    for i in range(int(self.assets.shape[1] / 2) + 2, self.assets.shape[1] + 1):
                        self.view_5.setColumnWidth(i, 250)
        self.model_3 = PandasModel(self.t_port_sect, headers_column=['Stocks', 'Number', 'Countries', 'Sectors'],
                                   headers_row=[str(i) for i in range(1, self.t_port_sect.shape[0] + 1)])
        self.view_3.setModel(self.model_3)
        self.model_5 = PandasModel(self.assets, headers_column=['Stocks', 'Number', 'Open', 'High', 'Low',
                                                                'Close', 'Volume', 'Dividends (per year)',
                                                                '% of Shares Held by All Insider',
                                                                '% of Shares Held by Inst.',
                                                                '% of Float Held by Inst.',
                                                                'Number of Inst. Hold. Shares'],
                                   headers_row=[str(i) for i in range(1, self.assets.shape[0] + 1)])
        self.view_5.setModel(self.model_5)
        self.model_6 = PandasModel(self.stock_growth, headers_column=['Stocks', 'Stock growth %',
                                                                      'Stock growth, RUB'],
                                   headers_row=[str(i) for i in
                                                range(1, self.stock_growth.shape[0] + 1)])
        self.view_6.setModel(self.model_6)
        self.model_7 = PandasModel(self.recom, headers_column=self.columns_,
                                   headers_row=[str(i) for i in range(1, self.recom.shape[0] + 1)])
        self.view_7.setModel(self.model_7)

        cp = set_port_and_portfolio(changed_port)
        canvases_and_toolbars = [self.toolbar_1, self.toolbar_2, self.toolbar_p, self.toolbar_c, self.canvas_1, self.canvas_2,
                      self.canvas_p, self.canvas_c]
        if not changed_port:
            for i in canvases_and_toolbars:
                i.deleteLater()
                i.hide()
            self.fig_1 = empty_pie('Share by Countries')
            self.fig_2 = empty_pie('Share by Sectors')
            self.fig_p = empty_pie('Amount of Stocks')
            self.fig_c = empty_plot('Price of Stocks')
            self.canvas_1 = GraphicsCanvas(self.fig_1)
            self.canvas_2 = GraphicsCanvas(self.fig_2)
            self.canvas_p = GraphicsCanvas(self.fig_p)
            self.canvas_c = GraphicsCanvas(self.fig_c)
            self.toolbar_1 = NavigationToolbar(self.canvas_1, MainWindow)
            self.toolbar_2 = NavigationToolbar(self.canvas_2, MainWindow)
            self.toolbar_p = NavigationToolbar(self.canvas_p, MainWindow)
            self.toolbar_c = NavigationToolbar(self.canvas_c, MainWindow)
            self.layout_for_mpl_1.addWidget(self.canvas_1)
            self.layout_for_mpl_2.addWidget(self.canvas_2)
            self.layout_for_mpl_p.addWidget(self.canvas_p)
            self.layout_for_mpl_c.addWidget(self.canvas_c)
            self.layout_for_mpl_1.addWidget(self.toolbar_1)
            self.layout_for_mpl_2.addWidget(self.toolbar_2)
            self.layout_for_mpl_p.addWidget(self.toolbar_p)
            self.layout_for_mpl_c.addWidget(self.toolbar_c)
        else:
            for i in canvases_and_toolbars:
                i.deleteLater()
                i.hide()
            self.fig_1 = plot_c(cp)
            self.fig_2 = plot_s(cp)
            self.fig_p = plot_p(cp)
            self.fig_c = plot_common(150, read_port())
            self.canvas_1 = GraphicsCanvas(self.fig_1)
            self.canvas_2 = GraphicsCanvas(self.fig_2)
            self.canvas_p = GraphicsCanvas(self.fig_p)
            self.canvas_c = GraphicsCanvas(self.fig_c)
            self.toolbar_1 = NavigationToolbar(self.canvas_1, MainWindow)
            self.toolbar_2 = NavigationToolbar(self.canvas_2, MainWindow)
            self.toolbar_p = NavigationToolbar(self.canvas_p, MainWindow)
            self.toolbar_c = NavigationToolbar(self.canvas_c, MainWindow)
            self.layout_for_mpl_1.addWidget(self.canvas_1)
            self.layout_for_mpl_2.addWidget(self.canvas_2)
            self.layout_for_mpl_p.addWidget(self.canvas_p)
            self.layout_for_mpl_c.addWidget(self.canvas_c)
            self.layout_for_mpl_1.addWidget(self.toolbar_1)
            self.layout_for_mpl_2.addWidget(self.toolbar_2)
            self.layout_for_mpl_p.addWidget(self.toolbar_p)
            self.layout_for_mpl_c.addWidget(self.toolbar_c)

    def change_language_strategies(self):
        if self.flag_language == 'ru':
            self.about_strategies.setHtml(self.strategies_eng)
            self.flag_language = 'eng'
        elif self.flag_language == 'eng':
            self.about_strategies.setHtml(self.strategies)
            self.flag_language = 'ru'

    def change_language(self):
        if self.book.toPlainText() == self.tutorial:
            self.book.setText(self.tutorial_eng)
            self.book.setFixedHeight(int(self.book.document().size().height() + self.book.contentsMargins().top() * 2))
            self.contributors.setText("Developers: <a href=https://github.com/dzbarts>Artem Dzuybak</a> "
                                      "and <a href=https://github.com/ValeriaMatveeva1>Matveeva Valeria</a>")
        else:
            self.book.setText(self.tutorial)
            self.book.setFixedHeight(int(self.book.document().size().height() + self.book.contentsMargins().top() * 2))
            self.contributors.setText("Разработчики: <a href=https://github.com/dzbarts>Артём Дзюбак</a> "
                                      "и <a href=https://github.com/ValeriaMatveeva1>Матвеева Валерия</a>")

    def add_to_the_portfolio(self):
        old_port = read_port()
        if (self.edit.text() == '') | (self.edit_n.text() == ''):
            message_box("Ошибка набора", "Пустой текст", QMessageBox.Warning)
        else:
            try:
                n = int(self.edit_n.text())
                stock = self.edit.text().upper().replace(' ', '')
                if len(yf.Ticker(stock).info) != 2:
                    while n > 0:
                        rewrite_port(stock)
                        n = n - 1
                    self.renew_all_tables(old_port, stock)
                else:
                    message_box("Ошибка набора", "Такой акции не существует", QMessageBox.Warning)
            except ValueError:
                message_box("Ошибка набора", "Неверный формат текста", QMessageBox.Warning)
        self.edit.clear()
        self.edit_n.clear()

    def remove_the_stock(self):
        old_port = read_port()
        if (self.edit.text() == '') | (self.edit_n.text() == ''):
            message_box("Ошибка набора", "Пустой текст", QMessageBox.Warning)

        else:
            try:
                n = int(self.edit_n.text())
                stock = self.edit.text().upper().replace(' ', '')
                if read_port().count(stock) >= n:
                    while n > 0:
                        remove_from_port(stock)
                        n = n - 1
                    self.renew_all_tables(old_port, stock)
                else:
                    message_box("Ошибка набора", "У Вас осталось " + str(read_port().count(stock)) + " акций", QMessageBox.Warning)
            except ValueError:
                message_box("Ошибка набора", "Неверный формат текста", QMessageBox.Warning)
            self.edit.clear()
            self.edit_n.clear()

    def clear_the_portfolio(self):
        old_port = read_port()
        if not old_port:
            message_box("Ошибка", "Портфель уже пуст", QMessageBox.Warning)
        else:
            clear_all()
            self.renew_all_tables(old_port, '')


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    loader = loading_window()  # создаем загрузочное окно
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow(loader)
    ui.loaded.connect(loader.update_progress_bar)  # соединяем сигналом
    ui.setupUi(MainWindow)
    app.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())  # изменение темы приложения
    MainWindow.show()
    sys.exit(app.exec_())
